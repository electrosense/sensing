// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `sync.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <sync.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Electrosense__Synchronization__start_name = "start";

}
::IceProxy::Ice::Object* ::IceProxy::Electrosense::upCast(::IceProxy::Electrosense::Time* p) { return p; }

void
::IceProxy::Electrosense::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Electrosense::Time>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Electrosense::Time;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Electrosense::Time::ice_staticId()
{
    return ::Electrosense::Time::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Electrosense::Time::__newInstance() const
{
    return new Time;
}
::IceProxy::Ice::Object* ::IceProxy::Electrosense::upCast(::IceProxy::Electrosense::ScanningParameters* p) { return p; }

void
::IceProxy::Electrosense::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Electrosense::ScanningParameters>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Electrosense::ScanningParameters;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::Electrosense::ScanningParameters::ice_staticId()
{
    return ::Electrosense::ScanningParameters::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Electrosense::ScanningParameters::__newInstance() const
{
    return new ScanningParameters;
}
::IceProxy::Ice::Object* ::IceProxy::Electrosense::upCast(::IceProxy::Electrosense::Synchronization* p) { return p; }

void
::IceProxy::Electrosense::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Electrosense::Synchronization>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Electrosense::Synchronization;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Electrosense::Synchronization::start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Electrosense__Synchronization__start_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_reference);
        __os->write(__p_delay);
        __os->write(__p_parameters);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Electrosense::Synchronization::begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Electrosense__Synchronization__start_name, __del, __cookie);
    try
    {
        __result->prepare(__Electrosense__Synchronization__start_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_reference);
        __os->write(__p_delay);
        __os->write(__p_parameters);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Electrosense::Synchronization::end_start(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Electrosense__Synchronization__start_name);
}

const ::std::string&
IceProxy::Electrosense::Synchronization::ice_staticId()
{
    return ::Electrosense::Synchronization::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Electrosense::Synchronization::__newInstance() const
{
    return new Synchronization;
}

::Ice::Object* Electrosense::upCast(::Electrosense::Time* p) { return p; }
::Ice::ObjectPtr
Electrosense::Time::ice_clone() const
{
    ::Ice::Object* __p = new Time(*this);
    return __p;
}

namespace
{
const ::std::string __Electrosense__Time_ids[2] =
{
    "::Electrosense::Time",
    "::Ice::Object"
};

}

bool
Electrosense::Time::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Electrosense__Time_ids, __Electrosense__Time_ids + 2, _s);
}

::std::vector< ::std::string>
Electrosense::Time::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Electrosense__Time_ids[0], &__Electrosense__Time_ids[2]);
}

const ::std::string&
Electrosense::Time::ice_id(const ::Ice::Current&) const
{
    return __Electrosense__Time_ids[0];
}

const ::std::string&
Electrosense::Time::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Electrosense::Time";
    return typeId;
#else
    return __Electrosense__Time_ids[0];
#endif
}

void
Electrosense::Time::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(sec);
    __os->write(nsec);
    __os->endWriteSlice();
}

void
Electrosense::Time::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(sec);
    __is->read(nsec);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::Electrosense::Time> __Electrosense__Time_init("::Electrosense::Time");
}

::Ice::ObjectFactoryPtr
Electrosense::Time::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::Electrosense::Time::ice_staticId());
}

void 
Electrosense::__patch(TimePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Electrosense::TimePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Electrosense::Time::ice_staticId(), v);
    }
}

::Ice::Object* Electrosense::upCast(::Electrosense::ScanningParameters* p) { return p; }
::Ice::ObjectPtr
Electrosense::ScanningParameters::ice_clone() const
{
    ::Ice::Object* __p = new ScanningParameters(*this);
    return __p;
}

namespace
{
const ::std::string __Electrosense__ScanningParameters_ids[2] =
{
    "::Electrosense::ScanningParameters",
    "::Ice::Object"
};

}

bool
Electrosense::ScanningParameters::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Electrosense__ScanningParameters_ids, __Electrosense__ScanningParameters_ids + 2, _s);
}

::std::vector< ::std::string>
Electrosense::ScanningParameters::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Electrosense__ScanningParameters_ids[0], &__Electrosense__ScanningParameters_ids[2]);
}

const ::std::string&
Electrosense::ScanningParameters::ice_id(const ::Ice::Current&) const
{
    return __Electrosense__ScanningParameters_ids[0];
}

const ::std::string&
Electrosense::ScanningParameters::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Electrosense::ScanningParameters";
    return typeId;
#else
    return __Electrosense__ScanningParameters_ids[0];
#endif
}

void
Electrosense::ScanningParameters::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(frequency);
    __os->write(samplingRate);
    __os->write(downSample);
    __os->write(gain);
    __os->write(chunkSize);
    __os->write(overlapSize);
    __os->write(duration);
    __os->endWriteSlice();
}

void
Electrosense::ScanningParameters::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(frequency);
    __is->read(samplingRate);
    __is->read(downSample);
    __is->read(gain);
    __is->read(chunkSize);
    __is->read(overlapSize);
    __is->read(duration);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::Electrosense::ScanningParameters> __Electrosense__ScanningParameters_init("::Electrosense::ScanningParameters");
}

::Ice::ObjectFactoryPtr
Electrosense::ScanningParameters::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::Electrosense::ScanningParameters::ice_staticId());
}

void 
Electrosense::__patch(ScanningParametersPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Electrosense::ScanningParametersPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Electrosense::ScanningParameters::ice_staticId(), v);
    }
}

::Ice::Object* Electrosense::upCast(::Electrosense::Synchronization* p) { return p; }

namespace
{
const ::std::string __Electrosense__Synchronization_ids[2] =
{
    "::Electrosense::Synchronization",
    "::Ice::Object"
};

}

bool
Electrosense::Synchronization::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Electrosense__Synchronization_ids, __Electrosense__Synchronization_ids + 2, _s);
}

::std::vector< ::std::string>
Electrosense::Synchronization::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Electrosense__Synchronization_ids[0], &__Electrosense__Synchronization_ids[2]);
}

const ::std::string&
Electrosense::Synchronization::ice_id(const ::Ice::Current&) const
{
    return __Electrosense__Synchronization_ids[0];
}

const ::std::string&
Electrosense::Synchronization::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Electrosense::Synchronization";
    return typeId;
#else
    return __Electrosense__Synchronization_ids[0];
#endif
}

::Ice::DispatchStatus
Electrosense::Synchronization::___start(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Electrosense::TimePtr __p_reference;
    ::Electrosense::TimePtr __p_delay;
    ::Electrosense::ScanningParametersPtr __p_parameters;
    __is->read(__p_reference);
    __is->read(__p_delay);
    __is->read(__p_parameters);
    __is->readPendingObjects();
    __inS.endReadParams();
    start(__p_reference, __p_delay, __p_parameters, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Electrosense__Synchronization_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "start"
};

}

::Ice::DispatchStatus
Electrosense::Synchronization::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Electrosense__Synchronization_all, __Electrosense__Synchronization_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Electrosense__Synchronization_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___start(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Electrosense::Synchronization::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Electrosense::Synchronization::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Electrosense::__patch(SynchronizationPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Electrosense::SynchronizationPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Electrosense::Synchronization::ice_staticId(), v);
    }
}
