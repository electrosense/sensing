// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `sync.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef _____ESenseInterfaces__sync_h__
#define _____ESenseInterfaces__sync_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Electrosense
{

class Time;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Electrosense::Time>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Electrosense::Time*);

class ScanningParameters;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Electrosense::ScanningParameters>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Electrosense::ScanningParameters*);

class Synchronization;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Electrosense::Synchronization>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Electrosense::Synchronization*);

}

}

namespace Electrosense
{

class Time;
::Ice::Object* upCast(::Electrosense::Time*);
typedef ::IceInternal::Handle< ::Electrosense::Time> TimePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Electrosense::Time> TimePrx;
void __patch(TimePtr&, const ::Ice::ObjectPtr&);

class ScanningParameters;
::Ice::Object* upCast(::Electrosense::ScanningParameters*);
typedef ::IceInternal::Handle< ::Electrosense::ScanningParameters> ScanningParametersPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Electrosense::ScanningParameters> ScanningParametersPrx;
void __patch(ScanningParametersPtr&, const ::Ice::ObjectPtr&);

class Synchronization;
::Ice::Object* upCast(::Electrosense::Synchronization*);
typedef ::IceInternal::Handle< ::Electrosense::Synchronization> SynchronizationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Electrosense::Synchronization> SynchronizationPrx;
void __patch(SynchronizationPtr&, const ::Ice::ObjectPtr&);

}

namespace Electrosense
{

class Callback_Synchronization_start_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Synchronization_start_Base> Callback_Synchronization_startPtr;

}

namespace IceProxy
{

namespace Electrosense
{

class Time : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Time> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_secure(bool __secure) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_twoway() const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_oneway() const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_batchOneway() const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_datagram() const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_batchDatagram() const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_compress(bool __compress) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Time> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Time*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ScanningParameters : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_secure(bool __secure) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_twoway() const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_oneway() const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_batchOneway() const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_datagram() const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_batchDatagram() const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_compress(bool __compress) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ScanningParameters> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ScanningParameters*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Synchronization : virtual public ::IceProxy::Ice::Object
{
public:

    void start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters)
    {
        start(__p_reference, __p_delay, __p_parameters, 0);
    }
    void start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::Ice::Context& __ctx)
    {
        start(__p_reference, __p_delay, __p_parameters, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_start(__p_reference, __p_delay, __p_parameters, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_start(__p_reference, __p_delay, __p_parameters, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_start(__p_reference, __p_delay, __p_parameters, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_start(__p_reference, __p_delay, __p_parameters, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters)
    {
        return begin_start(__p_reference, __p_delay, __p_parameters, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::Ice::Context& __ctx)
    {
        return begin_start(__p_reference, __p_delay, __p_parameters, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_start(__p_reference, __p_delay, __p_parameters, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_start(__p_reference, __p_delay, __p_parameters, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::Electrosense::Callback_Synchronization_startPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_start(__p_reference, __p_delay, __p_parameters, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_start(const ::Electrosense::TimePtr& __p_reference, const ::Electrosense::TimePtr& __p_delay, const ::Electrosense::ScanningParametersPtr& __p_parameters, const ::Ice::Context& __ctx, const ::Electrosense::Callback_Synchronization_startPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_start(__p_reference, __p_delay, __p_parameters, &__ctx, __del, __cookie);
    }

    void end_start(const ::Ice::AsyncResultPtr&);
    
private:

    void start(const ::Electrosense::TimePtr&, const ::Electrosense::TimePtr&, const ::Electrosense::ScanningParametersPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_start(const ::Electrosense::TimePtr&, const ::Electrosense::TimePtr&, const ::Electrosense::ScanningParametersPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Synchronization> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_secure(bool __secure) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_twoway() const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_oneway() const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_batchOneway() const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_datagram() const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_batchDatagram() const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_compress(bool __compress) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Synchronization> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Synchronization*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Electrosense
{

class Time : virtual public ::Ice::Object
{
public:

    typedef TimePrx ProxyType;
    typedef TimePtr PointerType;

    Time()
    {
    }

    Time(::Ice::Long __ice_sec, ::Ice::Long __ice_nsec) :
        sec(__ice_sec),
        nsec(__ice_nsec)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::Ice::Long sec;

    ::Ice::Long nsec;
protected:

    virtual ~Time() {}

friend class Time__staticInit;
};
#if !defined(_MSC_VER) || (_MSC_VER < 1900)
//
// COMPILERFIX: Visual Studio 2015 update 1 fails to access
// the proected destructor from a friend class.
//

class Time__staticInit
{
public:

    ::Electrosense::Time _init;
};

static Time__staticInit _Time_init;
#else
static auto _Time_init = ::Electrosense::Time::ice_factory;
#endif

inline bool operator==(const Time& l, const Time& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Time& l, const Time& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ScanningParameters : virtual public ::Ice::Object
{
public:

    typedef ScanningParametersPrx ProxyType;
    typedef ScanningParametersPtr PointerType;

    ScanningParameters()
    {
    }

    ScanningParameters(::Ice::Long __ice_frequency, ::Ice::Long __ice_samplingRate, ::Ice::Long __ice_downSample, ::Ice::Int __ice_gain, ::Ice::Long __ice_chunkSize, ::Ice::Long __ice_overlapSize, ::Ice::Long __ice_duration) :
        frequency(__ice_frequency),
        samplingRate(__ice_samplingRate),
        downSample(__ice_downSample),
        gain(__ice_gain),
        chunkSize(__ice_chunkSize),
        overlapSize(__ice_overlapSize),
        duration(__ice_duration)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::Ice::Long frequency;

    ::Ice::Long samplingRate;

    ::Ice::Long downSample;

    ::Ice::Int gain;

    ::Ice::Long chunkSize;

    ::Ice::Long overlapSize;

    ::Ice::Long duration;
protected:

    virtual ~ScanningParameters() {}
};

inline bool operator==(const ScanningParameters& l, const ScanningParameters& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ScanningParameters& l, const ScanningParameters& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Synchronization : virtual public ::Ice::Object
{
public:

    typedef SynchronizationPrx ProxyType;
    typedef SynchronizationPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void start(const ::Electrosense::TimePtr&, const ::Electrosense::TimePtr&, const ::Electrosense::ScanningParametersPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___start(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Synchronization& l, const Synchronization& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Synchronization& l, const Synchronization& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Electrosense
{

template<class T>
class CallbackNC_Synchronization_start : public Callback_Synchronization_start_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Synchronization_start(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Synchronization_startPtr
newCallback_Synchronization_start(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Synchronization_start<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Synchronization_startPtr
newCallback_Synchronization_start(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Synchronization_start<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Synchronization_startPtr
newCallback_Synchronization_start(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Synchronization_start<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Synchronization_startPtr
newCallback_Synchronization_start(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Synchronization_start<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Synchronization_start : public Callback_Synchronization_start_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Synchronization_start(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Synchronization_startPtr
newCallback_Synchronization_start(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Synchronization_start<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Synchronization_startPtr
newCallback_Synchronization_start(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Synchronization_start<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Synchronization_startPtr
newCallback_Synchronization_start(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Synchronization_start<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Synchronization_startPtr
newCallback_Synchronization_start(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Synchronization_start<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
